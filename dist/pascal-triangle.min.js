"use strict";var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var PascalTriangle=function(){var e,t=function(){function e(t){if(_classCallCheck(this,e),!t)throw"No name argument";this.name=t,this.element=r(this.render()),this.elements=i(this.element,t),this.style&&n(this.style())}return _createClass(e,[{key:"class",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this.name+(e?"__"+e:"")+(t?"_"+t:"")}},{key:"render",value:function(){throw"render() is not implemented"}}]),e}(),n=function(e){if(!Array.from(document.head.querySelectorAll("style")).some(function(t){return t.textContent==e})){var t=document.createElement("style");t.textContent=e,document.head.appendChild(t)}},r=function(e){var t=document.createElement("div");return t.innerHTML=e,t.firstElementChild},i=function(e,t){var n={};return Array.from(e.querySelectorAll("[class^="+t+"__]")).forEach(function(e){var t=e.className.split("__",2)[1].split("_",1)[0];n[t]?Array.isArray(n[t])?n[t].push(e):n[t]=[n[t],e]:n[t]=e}),n},a={},l=function(e){function n(e,t){_classCallCheck(this,n);var r=_possibleConstructorReturn(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,"pascal-triangle-entry"));return r.element.textContent=s(e)[t],r}return _inherits(n,t),_createClass(n,[{key:"render",value:function(){return'<span class="'+this.class()+'"></span>'}},{key:"style",value:function(){return"\n    ."+this.class()+" {\n      display: inline-block;\n      min-width: 1.5em;\n      padding: 0 0.2em;\n      text-align: center;\n    }\n    "}}]),n}(),s=(e=function(e){return 0==e?[1]:[0].concat(s(e-1)).map(function(e,t,n){return e+(n[t+1]||0)})},function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];var i=JSON.stringify(n);return a[i]||(a[i]=e.apply(void 0,n)),a[i]});return function(e){function n(){_classCallCheck(this,n);var e=_possibleConstructorReturn(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,"pascal-triangle"));return e.elements.height.addEventListener("input",function(t){e.update(t.target.validity.valid?parseInt(t.target.value,10):0)}),e}return _inherits(n,t),_createClass(n,[{key:"createLine",value:function(){var e=document.createElement("div");return e.className=this.class("triangle-line"),e}},{key:"render",value:function(){return'\n    <div class="'+this.class()+'">\n      <div class="'+this.class("row")+'">\n        <span class="'+this.class("label")+'">Triangle height:</span>\n        <input autofocus class="'+this.class("height")+'" max="50" min="2" required type="number">\n      </div>\n      <div class="'+this.class("triangle")+'"></div>\n    </div>\n    '}},{key:"style",value:function(){return"\n    ."+this.class("triangle")+" {\n      display: table;\n      width: 100%;\n    }\n    ."+this.class("triangle-line")+" {\n      text-align: center;\n      white-space: nowrap;\n    }\n    "}},{key:"update",value:function(e){var t=this;if(this.elements.triangle.childElementCount>e)Array.from(Array(this.elements.triangle.childElementCount-e)).forEach(function(){return t.elements.triangle.removeChild(t.elements.triangle.lastElementChild)});else if(this.elements.triangle.childElementCount<e){var n=document.createDocumentFragment();Array.from(Array(e-this.elements.triangle.childElementCount)).forEach(function(e,r){var i=t.elements.triangle.childElementCount+r,a=t.createLine();Array.from(Array(i+1)).forEach(function(e,t){a.appendChild(new l(i,t).element)}),n.appendChild(a)}),this.elements.triangle.appendChild(n)}}}]),n}()}();
//# sourceMappingURL=pascal-triangle.min.js.map